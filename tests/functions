#! /bin/bash

# Application ID and Application Secret
export APP_ID_DEMO='0fb444a6d1bf449fb241cb3a641d4252'
export APP_SECRET_DEMO='bd819e3e3b0e41419a8148830a85ee04'

# Login/Password for a demo user 
export USER_DEMO='79999999999'
export USER_PWD_DEMO='1234'

# Test endpoints
export API_HOST=api.test.goldblocx.com
export AUTH_HOST=auth.test.goldblocx.com

#
# Generating a value for Basic Authorization header
# $1 - APP_ID
# $2 - APP_SECRET
#
function buildBasic() {

   if [ -z $1 ]; then
	    echo "APP_ID not specified"
	    exit 1
   fi
   if [ -z $2 ]; then
      echo "APP_SECRET not specified"
      exit 1
   fi

   unamestr=`uname`

   local BASIC

   if [[ "$unamestr" == 'Linux' ]]; then
      BASIC=`echo -n "$1:$2" | base64 -w 0`
   else
      BASIC=`echo "$1:$2\c" | base64`
   fi
   
   echo "$BASIC"
}
export -f buildBasic

#
# This function obtains a test access token using the demo credentials
#
function getTestToken() {

   # Step 1. Generating the BASIC authentication header ( base64(app_id:app_secret) )
   APP_ID="$APP_ID_DEMO"
   APP_SECRET="$APP_SECRET_DEMO"

   BASIC=$(buildBasic $APP_ID $APP_SECRET)

   # It is a global variable
   unset TOKEN
   rs=`curl -s -X POST -H 'Accept: application/json' \
                       -H 'Content-Type: application/x-www-form-urlencoded' \
                       -H "Authorization: Basic $BASIC" \
                       -d "grant_type=password&username=$USER_DEMO&password=$USER_PWD_DEMO&scope=full" \
                           https://$AUTH_HOST/auth/oauth/token`

   TOKEN=$(echo $rs | jq .access_token | trim)
   echo "Obtained a test token: $TOKEN"
}

export -f getTestToken

# Removes both quotes
function trim() {
    cat <<< `cat | sed -e 's/^"//' -e 's/"$//' -e 's/^\n//g'`
}

export -f trim

#
# Switching to a sample corporate entity
#
function switchToCorporate() {

    if [ -z $TOKEN ]; then
        echo "A token was not found, please authorize"
        exit 1
    fi

    # First of all, obtain the whole list of available clients
    rs=`curl -s -X GET -H "Content-Type: application/json" \
                       -H "Authorization: Bearer $TOKEN" \
                           https://$API_HOST/api/v1/customers`


    # We have a demo corporate entity with the name 'The good company'
    ID=$(echo $rs | jq '.[] | select(.name == "LLC Romashka") | .id')

    # Setting the current customer as the company The good company'
    rs=`curl -s -X PUT -H "Content-Type: application/json" \
                       -H "Authorization: Bearer $TOKEN" \
                           https://$API_HOST/api/v1/customers/$ID/current`
}

export -f switchToCorporate

#
# Creation of a sample application
#
function newApplication() {

    if [ -z $TOKEN ]; then
        echo "A token not found, please authorize"
        exit 1
    fi

   MODEL='{}'
   rs=`curl -s -X POST -H "Accept: application/json" \
                       -H "Content-Type: application/json" \
                       -H "Authorization: Bearer $TOKEN" \
                       -d $MODEL \
                           https://$API_HOST/api/v1/applications`
   echo "Created App:"
   echo $rs | jq

   APP_ID=$(echo $rs | jq .app_id | trim)
   APP_SECRET=$(echo $rs | jq .app_secret | trim)

   # Now trying to authenticate in the Application
   BASIC=$(buildBasic $APP_ID $APP_SECRET)

   rs=`curl -s -X POST -H 'Accept: application/json' \
                       -H 'Content-Type: application/x-www-form-urlencoded' \
                       -H "Authorization: Basic $BASIC" \
                       -d "grant_type=password&username=$USER_DEMO&password=$USER_PWD_DEMO&scope=full" \
                           https://$AUTH_HOST/auth/oauth/token`

   TOKEN=$(echo $rs | jq .access_token | trim)   
   switchToCorporate
}

export -f newApplication

#
# Removing an application
#
function removeApplication() {

   if [ -z $1 ]; then
    echo "APP_ID not specified"
    exit 1
   fi

   # Removing the application
   rs=`curl -s -X DELETE -H 'Accept: application/json' \
                         -H 'Content-Type: application/json' \
                         -H "Authorization: Bearer $TOKEN" \
                             https://$API_HOST/api/v1/applications/$1`
   echo "Removing the app: $1"
}

export -f removeApplication
